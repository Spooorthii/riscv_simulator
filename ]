import random 

def decode_itype_opcode(opcode_int):
    opcode = f"{(opcode_int & 0b1111111):07b}"
    rd = f"{(opcode_int >> 7) & 0b11111:05b}"
    fun = f"{(opcode_int >> 12) & 0b111:03b}"
    rs1 = f"{(opcode_int >> 15) & 0b11111:05b}"
    imm = f"{(opcode_int >> 20) & 0b111111111111:012b}"
    imm_int = int(imm, 2)
    if imm_int >= 2048:
        imm_int -= 4096
    return opcode, rd, fun, rs1, imm_int

def extract_opcode(instruction_line):
    start_index = instruction_line.find("(") + 1
    end_index = instruction_line.find(")")
    opcode = instruction_line[start_index:end_index]
    return opcode

def extract_imm_value(instruction_line):
    imm_str = instruction_line.split(',')[1].strip()
    imm_parts = imm_str.split('(')  
    imm_num = imm_parts[0].strip()  
    imm = int(imm_num)
    return imm

def extract_memory_address(instruction_line):
    open_paren_index = instruction_line.find("(")
    close_paren_index = instruction_line.find(")")
    memory_address_str = instruction_line[open_paren_index + 1:close_paren_index]
    memory_address = int(memory_address_str, 16)
    return memory_address

def decode_opcode(instruction_line):
    parts = instruction_line.split()
    opcode_hex = parts[3].replace('(', '').replace(')', '')
    opcode_int = int(opcode_hex, 16)
    opcode_bits = f"{(opcode_int & 0b1111111):07b}"

    if opcode_bits == '0000011':
        opcode, rd, fun, rs1, imm = decode_itype_opcode(opcode_int)
        rs2 = None  
        rd = f"x{int(rd, 2)}"
        rs1 = f"x{int(rs1, 2)}"
        if rs2 is not None:
            rs2 = f"x{int(rs2, 2)}"
        return opcode, rd, fun, rs1, rs2, imm

def main():
    reg_val = {f"x{i}": random.randint(0, 10) for i in range(32)}
    memory = {}
    with open('trace.txt', "r") as p:
        for line in p:
            if any(instr in line for instr in ['lw']):
                opcode = bin(int(extract_opcode(line), 16))[2:].zfill(32)
                opcode_type = opcode[:7]
                print('type  opcode:', opcode_type, opcode)
                opcode, rd, fun, rs1, rs2, imm = decode_opcode(line)
                if opcode:
                    rd_val_int = reg_val[rd]
                    rs1_val_int = reg_val[rs1]
                    if rs2 is not None:
                        rs2_val_int = reg_val[rs2]

                    if opcode == '0000011' and fun == '010':
                        imm_val = extract_imm_value(line)
                        result = (rs1_val_int + imm) & 0xFFFF
                        reg_val[rd] = result
                        instruction_name = 'lw'
                        operands = f"{rd}, {rs1}, {imm_val}"
                        result_str = f"{rd} = ({rs1}:{rs1_val_int} + {imm_val}) & 0xFFFF"
                                          
                    else:
                        result_str = "unknown instruction"
                        instruction_name = "unknown"
                        operands = ""
                else:
                    result_str = "unknown instruction"
                    instruction_name = "unknown"
                    operands = ""

                print(f"{instruction_name}:{operands}")
                print(f"{result_str}")
                print(f"{rd}: {reg_val[rd]}")
                memory_address = extract_memory_address(instruction_line)
                print(f"Memory Address: 0x{memory_address:08X}")
                print()                
if __name__ == "__main__":
    main()





